{
  "articles": [
    {
      "path": "custom_docker.html",
      "title": "docker 컨테이너 환경 설정하기",
      "description": "docker 기반으로 Shiny 서버를 운영하기 위한 컨테이너 환경설정을 수행합니다.\n",
      "author": [
        {
          "name": "유충현",
          "url": "https://choonghyunryu.github.io/"
        }
      ],
      "date": "2022-01-16",
      "contents": "\n\nContents\ndocker 컨테이너 환경 설정하기\nShiny 서버 환경 설정하기\n포트와 볼륨 설정\nDocker Desktop 활용\n콘솔 명령어 사용\n\nBitStat 애플리케이션 실행\n결언\n\ndocker 컨테이너 환경 설정하기\n우리는 Shiny 데모 애플리케이션을 실행하기 위해서 Shiny 서버를 설치하지는 않을 것입니다. Shiny 데모 애플리케이션이 구동되는 최소 환경은 “아 Shiny 애플리케이션이 서버가 docker 환경에서 실행되는 구나” 정도를 인지할 뿐, 사용자가 개발한 애플리케이션을 운영하기 위해서는 몇가지 작업을 수행해야 합니다.\n우리는 오픈통계 패키지인 BitStat를 Shiny 서버에서 운영하는 것을 전제로 Shiny 서버의 docker 환경을 설정할 것입니다.\ndocker를 업무에, 혹은 자주 사용하지 않는 관계로 docker에 정통하지는 않습니다. 아주 기본적인 지식만 가지고 있을 뿐이죠. (명령어를 줄줄이 외울 정도로 잦은 주기의 docker 작업을 수행하지 않기 때문에) 그래서 개인적으로 Mac OS에서 Docker Desktop라는 Docker 관리 애플리케이션을 사용하고 있습니다. 이 글은 Docker Desktop을 이용하는 방법을 위주로 작성합니다. 하지만 docker 명령어도 간간히 병기하여 설명하도록 합니다.\nShiny 서버 환경 설정하기\nShiny 서버에서 BitStat 애플리케이션을 운영하기 위해서는 다음과 같은 추가적인 환경설정 작업이 필요합니다.\n애플리케이션을 배포할 경로 설정\nBitStat 애플리케이션이 위치할 경로 설정\n\n애플리케이션 수행시 발생하는 로그 경로 설정\n애플리케이션 운영의 안정성을 위한 Shiny 서버 로그\n\n애플리케이션이 실행에 필요한 R 패키지 설치\nrocker/shiny-verse 이미지에 누락된 R 패키지 설치\n\n포트와 볼륨 설정\nrocker/shiny-verse 이미지에는 BitStat 애플리케이션이 포함되어 있지 않습니다. 그러므로 BitStat 애플리케이션을 docker 컨테이너에 호스트의 볼륨(Volumes)으로 탑재해야 합니다.\n그리고 docker 컨테이너 안에서의 수행하는 Shiny 애플리케이션의 로그를 호스트에서도 확인하기 위해서 로그를 쌓을 볼륨도 설정해야 합니다. 특히 모든 리소스들이 정확하게 설치되어 문제없이 애플리케이션이 실행되기 전까지는 이 로그의 역할이 매우 중요합니다. 트러블슈팅(Troubleshooting)의 실마리를 제공해주는 유일한 환경이기 때문입니다.\nShiny 서버는 3838 포트를 사용합니다. 여기서도 Shiny 서버의 기본 포트인 3838을 사용합니다.\nDocker Desktop 활용\nDocker Desktop의 이미지 목록의 ‘NAME’ 컬럼에 ’rocker/shiny-verse’이 리스트업 되었습니다.\nDocker Desktop의 이미지 목록포트와 볼륨 설정을 위해서 ‘RUN 버튼’을 눌러서 컨테이너 정의 다이얼로그를 엽니다. 그러면 다음과 같은 ‘New Container’ 다이얼로그가 나타납니다. 이 화면에서 바로 ’Run 버튼’누르지 말고 ‘Optional Settings’를 선택합니다.\nDocker Desktop의 이미지 목록이 Optional Settings 다이얼로그 창에서 다음처럼 포트와 볼륨설정을 정의합니다.\ndocker hub 사이트의 rocker/shiny 페이지를 참고하여 옵션을 설정합니다.\nContainer Name: shiny-server\nPorts:\nLocal Host: 3838\nContainer Port: default\n\nBitStat 애플리케이션 Path\nHost Path: BitStat 애플리케이션이 있는 호스트 경로\nContainer Path: /srv/shiny-server\n\nBitStat 애플리케이션 Path\nHost Path: Shiny 서버 로그를 저장할 호스트 경로\nContainer Path: /var/log/shiny-server\n\n설정한 후 ’Run 버튼’을 누르면 Shiny 서버 컨테이너가 실행됩니다.\nOptional Settings 다이얼로그 창이미지 목록 화면에서 ’rocker/shiny-verse’의 ‘INUSE’ 버튼을 누릅니다.\nOptional Settings 다이얼로그 창그러면 다음처럼 ‘rocker/shiny-verse’ 이미지에서 실행된 컨테이너 목록을 확인할 수 있습니다. 목록을 보면 ‘shiny-server’라는 이름의 컨테이너가 3838 포트로 실행중임을 알 수 있습니다.\nOptional Settings 다이얼로그 창콘솔 명령어 사용\nDocker Desktop을 사용하지 않는다면, 다음의 명령어로도 간단하게 ‘rocker/shiny’ 이미지를 실행할 수 있습니다.\n\ndocker run -d -p 3838:3838 --name shiny-server \\\n    -v /Users/choonghyunryu/shiny-server/:/srv/shiny-server/ \\\n    -v /Users/choonghyunryu/Documents/99_logs/shiny/:/var/log/shiny-server/ \\\n    rocker/shiny\n\nBitStat 애플리케이션 실행\n이제는 http://localhost:3838 URL로 Shiny 서버 데모가 실행되지 않습니다. Shiny 서버의 홈 디렉토리 호스트의 경로로 변경했기 때문입니다. 이제는 이 URL은 다음과 같은 화면을 출력합니다.\n로컬 호스트의 /Users/choonghyunryu/shiny-server/ 디렉토리에는 서브 디렉토리로 BitStat 애플리케이션이 위치하기 때문입니다.\nShiny 서버 홈디렉토리 애플리케이션화면에서 BitStat 링크를 클릭하거나 http://localhost:3838/BitStat/ URL로 BitStat 애플리케이션을 실행할 수 있습니다.\n그러나 다음처럼 에러가 발생했습니다.\n오류가 발생한 BiStat 애플리케이션에러가 발생한 원인을 호스트의 로그 볼륨에서 확인할 수 있습니다. 호스트의 /Users/choonghyunryu/Documents/99_logos/shiny 디렉토리에 있는 로그 파일을 열어봅니다.\nBiStat 애플리케이션 로그 파일docker 컨테이너에 shinyjs 패키지가 설치되어 있지 않았기 때문에 에러가 발생한 것입니다. ‘rocker/shiny-verse’ 이미지에는 이 패키지가 포함되어 있지 않기 때문입니다.\n결언\ndocker 컨테이너에 호스트의 애플리케이션 경로와 로그 경로를 연결하고, 포트를 설정했습니다. 그러나 ‘rocker/shiny-verse’ 이미지에 필요한 R 패키지가 없어서 서비스가 정상적으로 구동되지 않았습니다.\n컨테이너 안에 필요한 R 패키지를 설치해야 합니다.\n\n\n\n",
      "last_modified": "2022-01-20T07:58:04+09:00"
    },
    {
      "path": "custom_image.html",
      "title": "docker 이미지 만들기",
      "description": "Shiny 애플리케이션에 필요로 하는 R 패키지를 추가로 설치하여 새로운 docker 이미지를 생성합니다.\n",
      "author": [
        {
          "name": "유충현",
          "url": "https://choonghyunryu.github.io/"
        }
      ],
      "date": "2022-01-17",
      "contents": "\n\nContents\nDockerfile 만들기\n베이스 이미지 가져오기\n개발 라이브러리 설치하기\nR 패키지 설치하기\n포트지정\n사용자 전환\n\ndocker 이미지 생성\n컨테이너 생성 및 실행\n기존 컨테이너와 이미지 삭제\n컨테이너 생성 및 실행\n\nBitStat 애플리케이션 실행\n결언\n\nDockerfile 만들기\n이제 완전하게 Shiny 애플리케이션이 운용될 docker 컨테이너를 만들고 실행할 차례입니다.\nDockerfile은 컨테이너 내부에 유틸리티나 R 패키지를 설치할 수 있는 방법을 제공합니다. 즉, rocker/shiny-verse 이미지에서 지원하지 못했던, 애플리케이션을 실행시키는데 필요한 패키지를 설치할 수 있습니다.\n다음과 같은 내용의 Dockerfile 파일을 작성합니다. 의외로 설치하는 R 패키지가 많은 이유는, BitStat뿐만 아니라 개인적으로 만든 여러 개의 Shiny 애플리케이션을 이 환경에서 구동하기 위함입니다.\n\nFROM rocker/shiny:latest\n\n# system libraries of general use\nRUN apt-get update && apt-get install -y \\\n    libxml2-dev \\\n    libcairo2-dev \\\n    libsqlite3-dev \\\n    openjdk-11-jdk \\\n    liblzma-dev \\\n    libbz2-dev \\\n    libssl-dev\n\n# install R packages required\nRUN R -e \"install.packages('rJava',              repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('dlookr',             repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('shinyjs',            repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('shinydashboard',     repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('shinydashboardPlus', repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('shinyWidgets',       repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('shinybusy',          repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('shinythemes',        repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('shinycssloaders',    repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('colourpicker',       repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('htmltools',          repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('htmltools',          repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('reactable',          repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('glue',               repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('xlsx',               repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('flextable',          repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('googleVis',          repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('readr',              repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('forcats',            repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('plotly',             repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('DBI',                repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('waffle',             repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('RSQLite',            repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('remotes',            repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('dbplyr',             repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('ggthemes',           repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('treemapify',         repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('sparkline',          repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('formattable',        repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('DT',                 repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"install.packages('tidyverse',          repos = 'http://cran.rstudio.com/')\"\nRUN R -e \"remotes::install_github('dreamRs/shinytreeview')\"\n\nUSER shiny\n\n베이스 이미지 가져오기\n다음 FROM 명령어는 docker hub에서 ‘rocker/shiny’ 이미지의 최신 버전(lasett)을 가져오라는 의미입니디. 이 이미지를 베이스 이미지로 사용할 것입니다. 이미 앞에서 사용했던 이미지입니다.\n\nFROM rocker/shiny:latest\n\n개발 라이브러리 설치하기\n다음 RUN 명령어는 컨테이너 안의 Linux에서 Shell 명령어를 수행하라는 의미입니다.\n다수의 R 패키지는 Linux의 유틸리티나 동적 라이브러리를 인터페이스하여 구현합니다. 예를 들면 아래 libsqlite3-dev는 SQLite를 사용하기 위해서 sqlite3 라이브러리를 설치합니다.\n이를 위해서 Linux Shell ‘apt-get update && apt-get install -y’ 구문으로 개발 라이브러리를 설치합니다.\nR 패키지에서 설치하기 까다로운 rJava 패키지는 JVM(Java Virtual Machine)을 인터페이스하기 위해서 JDK를 설치해야 합니다. 이를 위해서 JDK 11 버전인 openjdk-11-jdk를 설치합니다.\n\n# system libraries of general use\nRUN apt-get update && apt-get install -y \\\n    libxml2-dev \\\n    libcairo2-dev \\\n    libsqlite3-dev \\\n    openjdk-11-jdk \\\n    liblzma-dev \\\n    libbz2-dev \\\n    libssl-dev\n\nR 패키지 설치하기\n다음 RUN 명령어는 R 유틸리티로 R 패키지를 설치합니다. -e 옵션은 R이 수행할 R 스크립트를 지정하는 옵션입니다. 따옴표 안의 R 스크립트로 패키지를 설치하게 됩니다.\n\nRUN R -e \"install.packages('rJava', repos = 'http://cran.rstudio.com/')\"\n\n포트지정\n컨테이너가 사용할 포트를 지정하기 위해서 EXPOSE 명령어를 사용하지 않아도 됩니다. 베이스 이미지로 ’rocker/shiny’를 사용했기 때문입니다. 이 베이스 이미지에 이미 EXPOSE 명령어로 3838 포트를 컨테이너가 사용할 수 있도록 설정되어 있기 때문입니다.\n사용자 전환\nroot 권한으로 컨테이너를 실행하면, 무제한의 권한이 부여되므로, 보안 측면에서 취약할 수 있습니다. 그래서 다음처럼 일반 사용자인 shiny 사용자 계정으로 컨테이너를 실행하도록 설정합니다.\n이지 베이스 이미지인 rocker/shiny-verse에서 shiny라는 그룹과 사용자를 만들어 놓았기 때문에 해당 사용자 계정을 만들 필요는 없습니다.\n\nUSER shiny\n\ndocker 이미지 생성\n앞에서 만든 Dockerfile는 ./shiny-docker 경로에 저장했습니다. 이 Dockerfile을 빌드해서 docker 이미지를 생성합니다.\nbuild 명령어로 이미지를 생성합니다. -t 옵션은 생성할 이미지의 이름을 지정합니다. 이미지 이름을 ’shiny’로 지정했습니다.\n\ndocker build -t shiny:first ./shiny-docker\n\n컨테이너 생성 및 실행\n기존 컨테이너와 이미지 삭제\n이제 앞에서 만들었던 ‘rocker/shiny-verse’ 이미지와 ‘shiny-server’ 컨테이너는 필요가 없어졌습니다. 그래서 다음처럼 컨테이너와 이미지를 차례대로 삭제합니다.\n\ndocker rm -f shiny-server\ndocker rmi rocker/shiny-verse\n\n컨테이너 생성 및 실행\n이번에는 Docker Desktop를 이용해서 컨테이너를 생성하고 실행합니다. 다음은 Optional Settings 다이얼로그 창에서의 환경설정 내용입니다.\nContainer Name: shiny-server\nPorts:\nLocal Host: 3838\nContainer Port: default\n\nBitStat 애플리케이션 Path\nHost Path: BitStat 애플리케이션이 있는 호스트 경로\nContainer Path: /srv/shiny-server\n\nBitStat 애플리케이션 Path\nHost Path: Shiny 서버 로그를 저장할 호스트 경로\nContainer Path: /var/log/shiny-server\n\nOptional Settings 다이얼로그 창다음 명령도로 동일한 기능을 수행합니다. –name 옵션은 컨테이너의 이름을 지정합니다. -p, -v는 각각 포트와 볼륨을 정의합니다.\n\ndocker run -d -p 3838:3838 --name shiny-server \\\n    -v /Users/choonghyunryu/shiny-server/:/srv/shiny-server/ \\\n    -v /Users/choonghyunryu/Documents/99_logs/shiny/:/var/log/shiny-server/ \\\n    shiny:first\n\n컨테이너를 실행한 후 콘솔로 들어가서 프로세스를 확인하면, 다음처럼 shiny 계정으로 shiny 서버 프로세스가 실행되었음을 확인할 수 있습니다.\n프로세스 현황BitStat 애플리케이션 실행\n이제는 http://localhost:3838/BitStat/ URL로 BitStat 애플리케이션을 실행할 수 있습니다.\n실행된 BitStat 애플리케이션 화면은 다음과 같습니다.\nBiStat 애플리케이션결언\n이제 docker 환경에서 BitStat 애플리케이션을 실행할 수 있습니다. 추가로 개발하는 Shiny 애플리케이션은 앞에서 정의한 로컬 호스트의 /Users/choonghyunryu/shiny-server/ 디렉토리에 배포하면 됩니다.\n어느 정도 목적하는 환경의 Shiny 서버를 구동하려면, 결국은 docker 이미지를 만들어야할 수 밖에 없습니다. 개인적으로 Shiny 애플리케이션의 데모 환경을 만들려는 목적으로 시도한 작업입니다만, docker의 매력을 느끼기에 충분했습니다.\nR과 Shiny를 사용하기에는 MS-Windows 환경이 부족함이 없지 않습니다. 여러 사람들과 협업을 하기 위해서는 동일한 환경에서의 작업이 중요합니다. 이런 대안으로 docker 환경에서 R과 Shiny를 사용하는 것이 유용한 대안이 될 것 같습니다.\n\n\n\n",
      "last_modified": "2022-01-20T07:58:05+09:00"
    },
    {
      "path": "index.html",
      "title": "docker 이미지 설치하기",
      "description": "docker 기반으로 Shiny 서버를 운영하기 위한 기초작업을 수행합니다.\n",
      "author": [
        {
          "name": "유충현",
          "url": "https://choonghyunryu.github.io/"
        }
      ],
      "date": "2022-01-16",
      "contents": "\n\nContents\nShiny 서버를 사용하는 이유\nShiny 서버 설치하기\ndocker 이미지 가져오기\nShiny 서버 실행하기\n\n결언\n\n\n\n\n\n\n\n들어가기\nShiny 서버 docker 이미지를 설치하여, 컨테이너를 구동하는 방법을 설명합니다.\n\ndocker가 설치된 환경을 전제로 설명합니다. docker 환경 구축하는 방법은 다루지 않습니다.\n\n\n\nShiny 서버를 사용하는 이유\nRStudio에서 Shiny 애플리케이션을 실행하면 애플리케이션을 종료하기 전까지 RStudio를 사용할 수 없습니다. 그러나 Shiny 서버에서 Shiny 애플리케이션을 구동하면, 언제든지 웹 브라우저에서 애플리케이션을 실행할 수 있고 RStudio는 애플리케이션의 구동과 독립적으로 사용할 수 있습니다.\nShiny 서버를 사용하는 이유에서 눈치챘겠지만, 이 글은 Shiny 애플리케이션을 호스팅할 목적의 작업이라기 보다는 개인 노트북에 Shiny 애플리케이션 데모 환경을 구축하기 위함입니다. 그러나 Shiny 애플리케이션을 호스팅할 목적으로도 활용할 수 있습니다.\nShiny 서버 설치하기\ndocker 이미지 가져오기\nShiny 서버의 운영을 위해서 rocker/shiny-verse 이미지를 가져옵니다. 이 이미지는 Shiny 이미지와 Tidyverse 패키지를 포함하고 있습니다.\nrocker/shiny + rocker/shiny-verse\n다음 명령으로 docker hub 저장소로부터 docker 이미지를 가져옵니다.\n\npull rocker/shiny-verse\n\n이미지 목록에서 가져온 Shiny 이미지를 확인할 수 있습니다.\n\ndocker images \n\nShiny 서버 실행하기\n다음 run 명령으로 docker 컨테이너를 생성하고 실행합니다. 즉, Shiny 서버를 실행합니다.\n\ndocker run --rm -p 3838:3838 rocker/shiny-verse\n\n서버가 실행되면, http://localhost:3838 URL에서 Shiny 데모 애플리케이션을 실행할 수 있습니다.\nShiny 데모 애플리케이션결언\ndocker 컨테이너로 Shiny 데모 애플리케이션을 구동할 수 있습니다. 그러나 아직은 사용자가 개발한 애플리케이션을 구동하기 위한 docker 환경은 아닙니다. 추가적인 환경 설정이 필요해 보입니다.\n\n\n\n",
      "last_modified": "2022-01-20T07:58:05+09:00"
    }
  ],
  "collections": []
}
